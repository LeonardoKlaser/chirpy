// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, password)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, email, password, is_chirpy_red
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :execresult
TRUNCATE TABLE users CASCADE
`

func (q *Queries) DeleteUsers(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUsers)
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, is_chirpy_red ,updated_at, email, password FROM users WHERE email = $1
`

type GetUserByEmailRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	IsChirpyRed sql.NullBool
	UpdatedAt   time.Time
	Email       string
	Password    string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.IsChirpyRed,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :one
UPDATE users SET email = $1, password = $2 WHERE id = $3 RETURNING id, created_at, updated_at, email, is_chirpy_red
`

type UpdateUserByIdParams struct {
	Email    string
	Password string
	ID       uuid.UUID
}

type UpdateUserByIdRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Email       string
	IsChirpyRed sql.NullBool
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) (UpdateUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserById, arg.Email, arg.Password, arg.ID)
	var i UpdateUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeToRed = `-- name: UpgradeToRed :execresult

UPDATE users SET is_chirpy_red = TRUE WHERE id = $1
`

func (q *Queries) UpgradeToRed(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	return q.db.ExecContext(ctx, upgradeToRed, id)
}
